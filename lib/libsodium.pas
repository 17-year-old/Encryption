unit libsodium;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{根据 https://doc.libsodium.org/internals#naming-conventions的说法
  * For each constant, a function returning the same value.
  * The name is identical to the constant but all lowercase: crypto_hash_bytes(void)
  * 下面所有的常量都有一个对应的函数，只是常量名称和函数名称大小写不一样，值是相同的
  *  这样的语法在C中是合法的，在Delphi中是不合法的，所以所有的常量定义都被注释掉了 }

{头文件中还有几个function-like macro(类似与函数调用的宏定义)也没有转换}

{$MINENUMSIZE 4}

interface

const
  LIB_SODIUM = 'libsodium.dll';

  { TODO : Macro refers to system symbol "__declspec": }
  (* SODIUM_EXPORT __declspec ( dllimport ) *)
  { TODO : Macro uses commented-out symbol "SODIUM_EXPORT": }
  (* SODIUM_EXPORT_WEAK SODIUM_EXPORT *)
  { TODO : Unable to convert function-like macro: }
  (* CRYPTO_ALIGN ( x ) __declspec ( align ( x ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* SODIUM_MIN ( A , B ) ( ( A ) < ( B ) ? ( A ) : ( B ) ) *)
  { TODO : Macro uses commented-out symbol "SODIUM_MIN": }
  (* SODIUM_SIZE_MAX SODIUM_MIN ( UINT64_MAX , SIZE_MAX ) *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_aes256gcm_KEYBYTES": }
  (* crypto_aead_aes256gcm_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_aes256gcm_NSECBYTES": }
  (* crypto_aead_aes256gcm_NSECBYTES 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_aes256gcm_NPUBBYTES": }
  (* crypto_aead_aes256gcm_NPUBBYTES 12U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_aes256gcm_ABYTES": }
  (* crypto_aead_aes256gcm_ABYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_aes256gcm_MESSAGEBYTES_MAX": }
  (* crypto_aead_aes256gcm_MESSAGEBYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX - crypto_aead_aes256gcm_ABYTES , ( 16ULL * ( ( 1ULL << 32 ) - 2ULL ) ) ) *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ietf_KEYBYTES": }
  (* crypto_aead_chacha20poly1305_ietf_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ietf_NSECBYTES": }
  (* crypto_aead_chacha20poly1305_ietf_NSECBYTES 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ietf_NPUBBYTES": }
  (* crypto_aead_chacha20poly1305_ietf_NPUBBYTES 12U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ietf_ABYTES": }
  (* crypto_aead_chacha20poly1305_ietf_ABYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX": }
  (* crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX - crypto_aead_chacha20poly1305_ietf_ABYTES , ( 64ULL * ( ( 1ULL << 32 ) - 1ULL ) ) ) *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_KEYBYTES": }
  (* crypto_aead_chacha20poly1305_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_NSECBYTES": }
  (* crypto_aead_chacha20poly1305_NSECBYTES 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_NPUBBYTES": }
  (* crypto_aead_chacha20poly1305_NPUBBYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_ABYTES": }
  (* crypto_aead_chacha20poly1305_ABYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX ( SODIUM_SIZE_MAX - crypto_aead_chacha20poly1305_ABYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_IETF_KEYBYTES": }
  (* crypto_aead_chacha20poly1305_IETF_KEYBYTES crypto_aead_chacha20poly1305_ietf_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_IETF_NSECBYTES": }
  (* crypto_aead_chacha20poly1305_IETF_NSECBYTES crypto_aead_chacha20poly1305_ietf_NSECBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_IETF_NPUBBYTES": }
  (* crypto_aead_chacha20poly1305_IETF_NPUBBYTES crypto_aead_chacha20poly1305_ietf_NPUBBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_IETF_ABYTES": }
  (* crypto_aead_chacha20poly1305_IETF_ABYTES crypto_aead_chacha20poly1305_ietf_ABYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX": }
  (* crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_ietf_KEYBYTES": }
  (* crypto_aead_xchacha20poly1305_ietf_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_ietf_NSECBYTES": }
  (* crypto_aead_xchacha20poly1305_ietf_NSECBYTES 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_ietf_NPUBBYTES": }
  (* crypto_aead_xchacha20poly1305_ietf_NPUBBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_ietf_ABYTES": }
  (* crypto_aead_xchacha20poly1305_ietf_ABYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX": }
  (* crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX ( SODIUM_SIZE_MAX - crypto_aead_xchacha20poly1305_ietf_ABYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_IETF_KEYBYTES": }
  (* crypto_aead_xchacha20poly1305_IETF_KEYBYTES crypto_aead_xchacha20poly1305_ietf_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_IETF_NSECBYTES": }
  (* crypto_aead_xchacha20poly1305_IETF_NSECBYTES crypto_aead_xchacha20poly1305_ietf_NSECBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_IETF_NPUBBYTES": }
  (* crypto_aead_xchacha20poly1305_IETF_NPUBBYTES crypto_aead_xchacha20poly1305_ietf_NPUBBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_IETF_ABYTES": }
  (* crypto_aead_xchacha20poly1305_IETF_ABYTES crypto_aead_xchacha20poly1305_ietf_ABYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX": }
  (* crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_hash_sha512_BYTES": }
  (* crypto_hash_sha512_BYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha512_BYTES": }
  (* crypto_auth_hmacsha512_BYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha512_KEYBYTES": }
  (* crypto_auth_hmacsha512_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha512256_BYTES": }
  (* crypto_auth_hmacsha512256_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha512256_KEYBYTES": }
  (* crypto_auth_hmacsha512256_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_BYTES": }
  (* crypto_auth_BYTES crypto_auth_hmacsha512256_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_KEYBYTES": }
  (* crypto_auth_KEYBYTES crypto_auth_hmacsha512256_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_PRIMITIVE": }
  (* crypto_auth_PRIMITIVE "hmacsha512256" *)
  { TODO : Macro probably uses invalid symbol "crypto_hash_sha256_BYTES": }
  (* crypto_hash_sha256_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha256_BYTES": }
  (* crypto_auth_hmacsha256_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_auth_hmacsha256_KEYBYTES": }
  (* crypto_auth_hmacsha256_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xsalsa20_KEYBYTES": }
  (* crypto_stream_xsalsa20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xsalsa20_NONCEBYTES": }
  (* crypto_stream_xsalsa20_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xsalsa20_MESSAGEBYTES_MAX": }
  (* crypto_stream_xsalsa20_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_SEEDBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_SEEDBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_NONCEBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_MACBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_MACBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX ( crypto_stream_xsalsa20_MESSAGEBYTES_MAX - crypto_box_curve25519xsalsa20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_ZEROBYTES": }
  (* crypto_box_curve25519xsalsa20poly1305_ZEROBYTES ( crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES + crypto_box_curve25519xsalsa20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_SEEDBYTES": }
  (* crypto_box_SEEDBYTES crypto_box_curve25519xsalsa20poly1305_SEEDBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES": }
  (* crypto_box_PUBLICKEYBYTES crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES": }
  (* crypto_box_SECRETKEYBYTES crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_NONCEBYTES": }
  (* crypto_box_NONCEBYTES crypto_box_curve25519xsalsa20poly1305_NONCEBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_MACBYTES": }
  (* crypto_box_MACBYTES crypto_box_curve25519xsalsa20poly1305_MACBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_box_MESSAGEBYTES_MAX crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX *)
  (* crypto_box_PRIMITIVE = 'curve25519xsalsa20poly1305'; *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES": }
  (* crypto_box_BEFORENMBYTES crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES *)
  { TODO : Macro uses commented-out symbol "crypto_box_PUBLICKEYBYTES": }
  (* crypto_box_SEALBYTES ( crypto_box_PUBLICKEYBYTES + crypto_box_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_ZEROBYTES": }
  (* crypto_box_ZEROBYTES crypto_box_curve25519xsalsa20poly1305_ZEROBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES": }
  (* crypto_box_BOXZEROBYTES crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xchacha20_KEYBYTES": }
  (* crypto_stream_xchacha20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xchacha20_NONCEBYTES": }
  (* crypto_stream_xchacha20_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xchacha20_MESSAGEBYTES_MAX": }
  (* crypto_stream_xchacha20_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_SEEDBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_SEEDBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_NONCEBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_MACBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_MACBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX ( crypto_stream_xchacha20_MESSAGEBYTES_MAX - crypto_box_curve25519xchacha20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_box_curve25519xchacha20poly1305_SEALBYTES": }
  (* crypto_box_curve25519xchacha20poly1305_SEALBYTES ( crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES + crypto_box_curve25519xchacha20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ed25519_BYTES": }
  (* crypto_core_ed25519_BYTES 32 *)
  (* crypto_core_ed25519_UNIFORMBYTES = 32; *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ed25519_HASHBYTES": }
  (* crypto_core_ed25519_HASHBYTES 64 *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ed25519_SCALARBYTES": }
  (* crypto_core_ed25519_SCALARBYTES 32 *)
  (* crypto_core_ed25519_NONREDUCEDSCALARBYTES = 64; *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hchacha20_OUTPUTBYTES": }
  (* crypto_core_hchacha20_OUTPUTBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hchacha20_INPUTBYTES": }
  (* crypto_core_hchacha20_INPUTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hchacha20_KEYBYTES": }
  (* crypto_core_hchacha20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hchacha20_CONSTBYTES": }
  (* crypto_core_hchacha20_CONSTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hsalsa20_OUTPUTBYTES": }
  (* crypto_core_hsalsa20_OUTPUTBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hsalsa20_INPUTBYTES": }
  (* crypto_core_hsalsa20_INPUTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hsalsa20_KEYBYTES": }
  (* crypto_core_hsalsa20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_hsalsa20_CONSTBYTES": }
  (* crypto_core_hsalsa20_CONSTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ristretto255_BYTES": }
  (* crypto_core_ristretto255_BYTES 32 *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ristretto255_HASHBYTES": }
  (* crypto_core_ristretto255_HASHBYTES 64 *)
  { TODO : Macro probably uses invalid symbol "crypto_core_ristretto255_SCALARBYTES": }
  (* crypto_core_ristretto255_SCALARBYTES 32 *)
  (* crypto_core_ristretto255_NONREDUCEDSCALARBYTES = 64;*)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa20_OUTPUTBYTES": }
  (* crypto_core_salsa20_OUTPUTBYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa20_INPUTBYTES": }
  (* crypto_core_salsa20_INPUTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa20_KEYBYTES": }
  (* crypto_core_salsa20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa20_CONSTBYTES": }
  (* crypto_core_salsa20_CONSTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa2012_OUTPUTBYTES": }
  (* crypto_core_salsa2012_OUTPUTBYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa2012_INPUTBYTES": }
  (* crypto_core_salsa2012_INPUTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa2012_KEYBYTES": }
  (* crypto_core_salsa2012_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa2012_CONSTBYTES": }
  (* crypto_core_salsa2012_CONSTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa208_OUTPUTBYTES": }
  (* crypto_core_salsa208_OUTPUTBYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa208_INPUTBYTES": }
  (* crypto_core_salsa208_INPUTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa208_KEYBYTES": }
  (* crypto_core_salsa208_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_core_salsa208_CONSTBYTES": }
  (* crypto_core_salsa208_CONSTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_BYTES_MIN": }
  (* crypto_generichash_blake2b_BYTES_MIN 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_BYTES_MAX": }
  (* crypto_generichash_blake2b_BYTES_MAX 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_BYTES": }
  (* crypto_generichash_blake2b_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_KEYBYTES_MIN": }
  (* crypto_generichash_blake2b_KEYBYTES_MIN 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_KEYBYTES_MAX": }
  (* crypto_generichash_blake2b_KEYBYTES_MAX 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_KEYBYTES": }
  (* crypto_generichash_blake2b_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_SALTBYTES": }
  (* crypto_generichash_blake2b_SALTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_blake2b_PERSONALBYTES": }
  (* crypto_generichash_blake2b_PERSONALBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_BYTES_MIN": }
  (* crypto_generichash_BYTES_MIN crypto_generichash_blake2b_BYTES_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_BYTES_MAX": }
  (* crypto_generichash_BYTES_MAX crypto_generichash_blake2b_BYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_BYTES": }
  (* crypto_generichash_BYTES crypto_generichash_blake2b_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_KEYBYTES_MIN": }
  (* crypto_generichash_KEYBYTES_MIN crypto_generichash_blake2b_KEYBYTES_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_KEYBYTES_MAX": }
  (* crypto_generichash_KEYBYTES_MAX crypto_generichash_blake2b_KEYBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_KEYBYTES": }
  (* crypto_generichash_KEYBYTES crypto_generichash_blake2b_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_generichash_PRIMITIVE": }
  (* crypto_generichash_PRIMITIVE "blake2b" *)
  { TODO : Macro probably uses invalid symbol "crypto_hash_BYTES": }
  (* crypto_hash_BYTES crypto_hash_sha512_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_hash_PRIMITIVE": }
  (* crypto_hash_PRIMITIVE "sha512" *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_blake2b_BYTES_MIN": }
  (* crypto_kdf_blake2b_BYTES_MIN 16 *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_blake2b_BYTES_MAX": }
  (* crypto_kdf_blake2b_BYTES_MAX 64 *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_blake2b_CONTEXTBYTES": }
  (* crypto_kdf_blake2b_CONTEXTBYTES 8 *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_blake2b_KEYBYTES": }
  (* crypto_kdf_blake2b_KEYBYTES 32 *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_BYTES_MIN": }
  (* crypto_kdf_BYTES_MIN crypto_kdf_blake2b_BYTES_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_BYTES_MAX": }
  (* crypto_kdf_BYTES_MAX crypto_kdf_blake2b_BYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_blake2b_CONTEXTBYTES": }
  (* crypto_kdf_CONTEXTBYTES crypto_kdf_blake2b_CONTEXTBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_kdf_KEYBYTES": }
  (* crypto_kdf_KEYBYTES crypto_kdf_blake2b_KEYBYTES *)
  (* crypto_kdf_PRIMITIVE = 'blake2b';*)
  (* crypto_kx_PUBLICKEYBYTES = 32;*)
  (* crypto_kx_SECRETKEYBYTES = 32;*)
  (* crypto_kx_SEEDBYTES = 32;*)
  (* crypto_kx_SESSIONKEYBYTES = 32;*)
  (* crypto_kx_PRIMITIVE = 'x25519blake2b';
  { TODO : Macro probably uses invalid symbol "crypto_onetimeauth_poly1305_BYTES": }
  (* crypto_onetimeauth_poly1305_BYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_onetimeauth_poly1305_KEYBYTES": }
  (* crypto_onetimeauth_poly1305_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_onetimeauth_BYTES": }
  (* crypto_onetimeauth_BYTES crypto_onetimeauth_poly1305_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_onetimeauth_KEYBYTES": }
  (* crypto_onetimeauth_KEYBYTES crypto_onetimeauth_poly1305_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_onetimeauth_PRIMITIVE": }
  (* crypto_onetimeauth_PRIMITIVE "poly1305" *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_ALG_ARGON2I13": }
  (* crypto_pwhash_argon2i_ALG_ARGON2I13 1 *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_BYTES_MIN": }
  (* crypto_pwhash_argon2i_BYTES_MIN 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_BYTES_MAX": }
  (* crypto_pwhash_argon2i_BYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX , 4294967295U ) *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_PASSWD_MIN": }
  (* crypto_pwhash_argon2i_PASSWD_MIN 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_PASSWD_MAX": }
  (* crypto_pwhash_argon2i_PASSWD_MAX 4294967295U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_SALTBYTES": }
  (* crypto_pwhash_argon2i_SALTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_STRBYTES": }
  (* crypto_pwhash_argon2i_STRBYTES 128U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_STRPREFIX": }
  (* crypto_pwhash_argon2i_STRPREFIX "$argon2i$" *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_OPSLIMIT_MIN": }
  (* crypto_pwhash_argon2i_OPSLIMIT_MIN 3U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_OPSLIMIT_MAX": }
  (* crypto_pwhash_argon2i_OPSLIMIT_MAX 4294967295U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_MEMLIMIT_MIN": }
  (* crypto_pwhash_argon2i_MEMLIMIT_MIN 8192U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_MEMLIMIT_MAX": }
  (* crypto_pwhash_argon2i_MEMLIMIT_MAX ( ( SIZE_MAX >= 4398046510080U ) ? 4398046510080U : ( SIZE_MAX >= 2147483648U ) ? 2147483648U : 32768U ) *)
  (* crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE = 4;*)
  (* crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE = 33554432; *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_OPSLIMIT_MODERATE": }
  (* crypto_pwhash_argon2i_OPSLIMIT_MODERATE 6U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_MEMLIMIT_MODERATE": }
  (* crypto_pwhash_argon2i_MEMLIMIT_MODERATE 134217728U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE": }
  (* crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE": }
  (* crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE 536870912U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_ALG_ARGON2ID13": }
  (* crypto_pwhash_argon2id_ALG_ARGON2ID13 2 *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_BYTES_MIN": }
  (* crypto_pwhash_argon2id_BYTES_MIN 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_BYTES_MAX": }
  (* crypto_pwhash_argon2id_BYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX , 4294967295U ) *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_PASSWD_MIN": }
  (* crypto_pwhash_argon2id_PASSWD_MIN 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_PASSWD_MAX": }
  (* crypto_pwhash_argon2id_PASSWD_MAX 4294967295U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_SALTBYTES": }
  (* crypto_pwhash_argon2id_SALTBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_STRBYTES": }
  (* crypto_pwhash_argon2id_STRBYTES 128U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_STRPREFIX": }
  (* crypto_pwhash_argon2id_STRPREFIX "$argon2id$" *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_MIN": }
  (* crypto_pwhash_argon2id_OPSLIMIT_MIN 1U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_MAX": }
  (* crypto_pwhash_argon2id_OPSLIMIT_MAX 4294967295U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_MIN": }
  (* crypto_pwhash_argon2id_MEMLIMIT_MIN 8192U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_MAX": }
  (* crypto_pwhash_argon2id_MEMLIMIT_MAX ( ( SIZE_MAX >= 4398046510080U ) ? 4398046510080U : ( SIZE_MAX >= 2147483648U ) ? 2147483648U : 32768U ) *)
  (* crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE = 2; *)
  (* crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE = 67108864; *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_MODERATE": }
  (* crypto_pwhash_argon2id_OPSLIMIT_MODERATE 3U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_MODERATE": }
  (* crypto_pwhash_argon2id_MEMLIMIT_MODERATE 268435456U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE": }
  (* crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE 4U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE": }
  (* crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE 1073741824U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_ALG_ARGON2I13": }
  (* crypto_pwhash_ALG_ARGON2I13 crypto_pwhash_argon2i_ALG_ARGON2I13 *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_ALG_ARGON2ID13": }
  (* crypto_pwhash_ALG_ARGON2ID13 crypto_pwhash_argon2id_ALG_ARGON2ID13 *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_ALG_DEFAULT": }
  (* crypto_pwhash_ALG_DEFAULT crypto_pwhash_ALG_ARGON2ID13 *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_BYTES_MIN": }
  (* crypto_pwhash_BYTES_MIN crypto_pwhash_argon2id_BYTES_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_BYTES_MAX": }
  (* crypto_pwhash_BYTES_MAX crypto_pwhash_argon2id_BYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_PASSWD_MIN": }
  (* crypto_pwhash_PASSWD_MIN crypto_pwhash_argon2id_PASSWD_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_PASSWD_MAX": }
  (* crypto_pwhash_PASSWD_MAX crypto_pwhash_argon2id_PASSWD_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_SALTBYTES": }
  (* crypto_pwhash_SALTBYTES crypto_pwhash_argon2id_SALTBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_STRBYTES": }
  (* crypto_pwhash_STRBYTES crypto_pwhash_argon2id_STRBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_STRPREFIX": }
  (* crypto_pwhash_STRPREFIX crypto_pwhash_argon2id_STRPREFIX *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_OPSLIMIT_MIN": }
  (* crypto_pwhash_OPSLIMIT_MIN crypto_pwhash_argon2id_OPSLIMIT_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_OPSLIMIT_MAX": }
  (* crypto_pwhash_OPSLIMIT_MAX crypto_pwhash_argon2id_OPSLIMIT_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_MEMLIMIT_MIN": }
  (* crypto_pwhash_MEMLIMIT_MIN crypto_pwhash_argon2id_MEMLIMIT_MIN *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_MEMLIMIT_MAX": }
  (* crypto_pwhash_MEMLIMIT_MAX crypto_pwhash_argon2id_MEMLIMIT_MAX *)
  (* crypto_pwhash_OPSLIMIT_INTERACTIVE = crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE; *)
  (* crypto_pwhash_MEMLIMIT_INTERACTIVE = crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE; *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_MODERATE": }
  (* crypto_pwhash_OPSLIMIT_MODERATE crypto_pwhash_argon2id_OPSLIMIT_MODERATE *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_MODERATE": }
  (* crypto_pwhash_MEMLIMIT_MODERATE crypto_pwhash_argon2id_MEMLIMIT_MODERATE *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE": }
  (* crypto_pwhash_OPSLIMIT_SENSITIVE crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE": }
  (* crypto_pwhash_MEMLIMIT_SENSITIVE crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_PRIMITIVE": }
  (* crypto_pwhash_PRIMITIVE "argon2i" *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_BYTES_MIN": }
  (* crypto_pwhash_scryptsalsa208sha256_BYTES_MIN 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_BYTES_MAX": }
  (* crypto_pwhash_scryptsalsa208sha256_BYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX , 0x1fffffffe0ULL ) *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN": }
  (* crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN 0U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX": }
  (* crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_SALTBYTES": }
  (* crypto_pwhash_scryptsalsa208sha256_SALTBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_STRBYTES": }
  (* crypto_pwhash_scryptsalsa208sha256_STRBYTES 102U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_STRPREFIX": }
  (* crypto_pwhash_scryptsalsa208sha256_STRPREFIX "$7$" *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN": }
  (* crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN 32768U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX": }
  (* crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX 4294967295U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN": }
  (* crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN 16777216U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX": }
  (* crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX SODIUM_MIN ( SIZE_MAX , 68719476736ULL ) *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE": }
  (* crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE 524288U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE": }
  (* crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE 16777216U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE": }
  (* crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE 33554432U *)
  { TODO : Macro probably uses invalid symbol "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE": }
  (* crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE 1073741824U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_curve25519_BYTES": }
  (* crypto_scalarmult_curve25519_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_curve25519_SCALARBYTES": }
  (* crypto_scalarmult_curve25519_SCALARBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_BYTES": }
  (* crypto_scalarmult_BYTES crypto_scalarmult_curve25519_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_SCALARBYTES": }
  (* crypto_scalarmult_SCALARBYTES crypto_scalarmult_curve25519_SCALARBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_PRIMITIVE": }
  (* crypto_scalarmult_PRIMITIVE "curve25519" *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_ed25519_BYTES": }
  (* crypto_scalarmult_ed25519_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_ed25519_SCALARBYTES": }
  (* crypto_scalarmult_ed25519_SCALARBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_ristretto255_BYTES": }
  (* crypto_scalarmult_ristretto255_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_scalarmult_ristretto255_SCALARBYTES": }
  (* crypto_scalarmult_ristretto255_SCALARBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_KEYBYTES": }
  (* crypto_secretbox_xsalsa20poly1305_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_NONCEBYTES": }
  (* crypto_secretbox_xsalsa20poly1305_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_MACBYTES": }
  (* crypto_secretbox_xsalsa20poly1305_MACBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX ( crypto_stream_xsalsa20_MESSAGEBYTES_MAX - crypto_secretbox_xsalsa20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES": }
  (* crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_ZEROBYTES": }
  (* crypto_secretbox_xsalsa20poly1305_ZEROBYTES ( crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES + crypto_secretbox_xsalsa20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_KEYBYTES": }
  (* crypto_secretbox_KEYBYTES crypto_secretbox_xsalsa20poly1305_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_NONCEBYTES": }
  (* crypto_secretbox_NONCEBYTES crypto_secretbox_xsalsa20poly1305_NONCEBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_MACBYTES": }
  (* crypto_secretbox_MACBYTES crypto_secretbox_xsalsa20poly1305_MACBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_PRIMITIVE": }
  (* crypto_secretbox_PRIMITIVE "xsalsa20poly1305" *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_secretbox_MESSAGEBYTES_MAX crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_ZEROBYTES": }
  (* crypto_secretbox_ZEROBYTES crypto_secretbox_xsalsa20poly1305_ZEROBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_BOXZEROBYTES": }
  (* crypto_secretbox_BOXZEROBYTES crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xchacha20poly1305_KEYBYTES": }
  (* crypto_secretbox_xchacha20poly1305_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xchacha20poly1305_NONCEBYTES": }
  (* crypto_secretbox_xchacha20poly1305_NONCEBYTES 24U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xchacha20poly1305_MACBYTES": }
  (* crypto_secretbox_xchacha20poly1305_MACBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX ( crypto_stream_xchacha20_MESSAGEBYTES_MAX - crypto_secretbox_xchacha20poly1305_MACBYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_KEYBYTES": }
  (* crypto_stream_chacha20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_NONCEBYTES": }
  (* crypto_stream_chacha20_NONCEBYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_MESSAGEBYTES_MAX": }
  (* crypto_stream_chacha20_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_ietf_KEYBYTES": }
  (* crypto_stream_chacha20_ietf_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_ietf_NONCEBYTES": }
  (* crypto_stream_chacha20_ietf_NONCEBYTES 12U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX": }
  (* crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX , 64ULL * ( 1ULL << 32 ) ) *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_IETF_KEYBYTES": }
  (* crypto_stream_chacha20_IETF_KEYBYTES crypto_stream_chacha20_ietf_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_IETF_NONCEBYTES": }
  (* crypto_stream_chacha20_IETF_NONCEBYTES crypto_stream_chacha20_ietf_NONCEBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX": }
  (* crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_ABYTES": }
  (* crypto_secretstream_xchacha20poly1305_ABYTES ( 1U + crypto_aead_xchacha20poly1305_ietf_ABYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_HEADERBYTES": }
  (* crypto_secretstream_xchacha20poly1305_HEADERBYTES crypto_aead_xchacha20poly1305_ietf_NPUBBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_KEYBYTES": }
  (* crypto_secretstream_xchacha20poly1305_KEYBYTES crypto_aead_xchacha20poly1305_ietf_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX": }
  (* crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX - crypto_secretstream_xchacha20poly1305_ABYTES , ( 64ULL * ( ( 1ULL << 32 ) - 2ULL ) ) ) *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_TAG_MESSAGE": }
  (* crypto_secretstream_xchacha20poly1305_TAG_MESSAGE 0x00 *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_TAG_PUSH": }
  (* crypto_secretstream_xchacha20poly1305_TAG_PUSH 0x01 *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_TAG_REKEY": }
  (* crypto_secretstream_xchacha20poly1305_TAG_REKEY 0x02 *)
  { TODO : Macro probably uses invalid symbol "crypto_secretstream_xchacha20poly1305_TAG_FINAL": }
  (* crypto_secretstream_xchacha20poly1305_TAG_FINAL ( crypto_secretstream_xchacha20poly1305_TAG_PUSH | crypto_secretstream_xchacha20poly1305_TAG_REKEY ) *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_siphash24_BYTES": }
  (* crypto_shorthash_siphash24_BYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_siphash24_KEYBYTES": }
  (* crypto_shorthash_siphash24_KEYBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_siphashx24_BYTES": }
  (* crypto_shorthash_siphashx24_BYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_siphashx24_KEYBYTES": }
  (* crypto_shorthash_siphashx24_KEYBYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_BYTES": }
  (* crypto_shorthash_BYTES crypto_shorthash_siphash24_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_KEYBYTES": }
  (* crypto_shorthash_KEYBYTES crypto_shorthash_siphash24_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_shorthash_PRIMITIVE": }
  (* crypto_shorthash_PRIMITIVE "siphash24" *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_ed25519_BYTES": }
  (* crypto_sign_ed25519_BYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_ed25519_SEEDBYTES": }
  (* crypto_sign_ed25519_SEEDBYTES 32U *)
  (* crypto_sign_ed25519_PUBLICKEYBYTES = 32;*)
  (* crypto_sign_ed25519_SECRETKEYBYTES = (32 + 32);*)
  { TODO : Macro uses commented-out symbol "SODIUM_SIZE_MAX": }
  (* crypto_sign_ed25519_MESSAGEBYTES_MAX ( SODIUM_SIZE_MAX - crypto_sign_ed25519_BYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_BYTES": }
  (* crypto_sign_BYTES crypto_sign_ed25519_BYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_SEEDBYTES": }
  (* crypto_sign_SEEDBYTES crypto_sign_ed25519_SEEDBYTES *)
  (* crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES;*)
  (* crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES;*)
  { TODO : Macro uses commented-out symbol "crypto_sign_ed25519_MESSAGEBYTES_MAX": }
  (* crypto_sign_MESSAGEBYTES_MAX crypto_sign_ed25519_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_PRIMITIVE": }
  (* crypto_sign_PRIMITIVE "ed25519" *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_edwards25519sha512batch_BYTES": }
  (* crypto_sign_edwards25519sha512batch_BYTES 64U *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_edwards25519sha512batch_PUBLICKEYBYTES": }
  (* crypto_sign_edwards25519sha512batch_PUBLICKEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_edwards25519sha512batch_SECRETKEYBYTES": }
  (* crypto_sign_edwards25519sha512batch_SECRETKEYBYTES ( 32U + 32U ) *)
  { TODO : Macro probably uses invalid symbol "crypto_sign_edwards25519sha512batch_MESSAGEBYTES_MAX": }
  (* crypto_sign_edwards25519sha512batch_MESSAGEBYTES_MAX ( SODIUM_SIZE_MAX - crypto_sign_edwards25519sha512batch_BYTES ) *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_KEYBYTES": }
  (* crypto_stream_KEYBYTES crypto_stream_xsalsa20_KEYBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_NONCEBYTES": }
  (* crypto_stream_NONCEBYTES crypto_stream_xsalsa20_NONCEBYTES *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_xsalsa20_MESSAGEBYTES_MAX": }
  (* crypto_stream_MESSAGEBYTES_MAX crypto_stream_xsalsa20_MESSAGEBYTES_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_PRIMITIVE": }
  (* crypto_stream_PRIMITIVE "xsalsa20" *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa20_KEYBYTES": }
  (* crypto_stream_salsa20_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa20_NONCEBYTES": }
  (* crypto_stream_salsa20_NONCEBYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa20_MESSAGEBYTES_MAX": }
  (* crypto_stream_salsa20_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa2012_KEYBYTES": }
  (* crypto_stream_salsa2012_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa2012_NONCEBYTES": }
  (* crypto_stream_salsa2012_NONCEBYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa2012_MESSAGEBYTES_MAX": }
  (* crypto_stream_salsa2012_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa208_KEYBYTES": }
  (* crypto_stream_salsa208_KEYBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa208_NONCEBYTES": }
  (* crypto_stream_salsa208_NONCEBYTES 8U *)
  { TODO : Macro probably uses invalid symbol "crypto_stream_salsa208_MESSAGEBYTES_MAX": }
  (* crypto_stream_salsa208_MESSAGEBYTES_MAX SODIUM_SIZE_MAX *)
  { TODO : Macro probably uses invalid symbol "crypto_verify_16_BYTES": }
  (* crypto_verify_16_BYTES 16U *)
  { TODO : Macro probably uses invalid symbol "crypto_verify_32_BYTES": }
  (* crypto_verify_32_BYTES 32U *)
  { TODO : Macro probably uses invalid symbol "crypto_verify_64_BYTES": }
  (* crypto_verify_64_BYTES 64U *)
  { TODO : Macro probably uses invalid symbol "randombytes_BYTES_MAX": }
  (* randombytes_BYTES_MAX SODIUM_MIN ( SODIUM_SIZE_MAX , 0xffffffffUL ) *)
  { TODO : Macro probably uses invalid symbol "randombytes_SEEDBYTES": }
  (* randombytes_SEEDBYTES 32U *)
  { TODO : Macro probably uses invalid symbol "randombytes_salsa20_implementation": }
  (* randombytes_salsa20_implementation randombytes_internal_implementation *)
  { TODO : Unable to convert function-like macro: }
  (* SODIUM_C99 ( X ) X *)
  (* sodium_base64_VARIANT_ORIGINAL = 1;  *)
  (* sodium_base64_VARIANT_ORIGINAL_NO_PADDING = 3; *)
  (* sodium_base64_VARIANT_URLSAFE = 5;  *)
  (* sodium_base64_VARIANT_URLSAFE_NO_PADDING = 7; *)
  { TODO : Unable to convert function-like macro: }
  (* sodium_base64_ENCODED_LEN ( BIN_LEN , VARIANT ) ( ( ( BIN_LEN ) / 3U ) * 4U + ( ( ( ( BIN_LEN ) - ( ( BIN_LEN ) / 3U ) * 3U ) | ( ( ( BIN_LEN ) - ( ( BIN_LEN ) / 3U ) * 3U ) >> 1 ) ) & 1U ) * ( 4U - ( ~ ( ( ( ( VARIANT ) & 2U ) >> 1 ) - 1U ) & ( 3U - ( ( BIN_LEN ) - ( ( BIN_LEN ) / 3U ) * 3U ) ) ) ) + 1U ) *)
  (* SODIUM_VERSION_STRING = '1.0.18';  *)
  (* SODIUM_LIBRARY_VERSION_MAJOR = 10; *)
  (* SODIUM_LIBRARY_VERSION_MINOR = 3; *)

type
  // Forward declarations
  PPByte = ^PByte;

  PUInt8 = ^UInt8;

  PNativeUInt = ^NativeUInt;

  Pcrypto_aead_aes256gcm_state_ = ^crypto_aead_aes256gcm_state_;

  Pcrypto_hash_sha512_state = ^crypto_hash_sha512_state;

  Pcrypto_auth_hmacsha512_state = ^crypto_auth_hmacsha512_state;

  Pcrypto_hash_sha256_state = ^crypto_hash_sha256_state;

  Pcrypto_auth_hmacsha256_state = ^crypto_auth_hmacsha256_state;

  Pcrypto_generichash_blake2b_state = ^crypto_generichash_blake2b_state;

  Pcrypto_onetimeauth_poly1305_state = ^crypto_onetimeauth_poly1305_state;

  Pcrypto_secretstream_xchacha20poly1305_state = ^crypto_secretstream_xchacha20poly1305_state;

  Pcrypto_sign_ed25519ph_state = ^crypto_sign_ed25519ph_state;

  Prandombytes_implementation = ^randombytes_implementation;

  crypto_aead_aes256gcm_state_ = record
    opaque: array[0..511] of Byte;
  end;

  crypto_aead_aes256gcm_state = crypto_aead_aes256gcm_state_;

  Pcrypto_aead_aes256gcm_state = ^crypto_aead_aes256gcm_state;

  crypto_hash_sha512_state = record
    state: array[0..7] of UInt64;
    count: array[0..1] of UInt64;
    buf: array[0..127] of UInt8;
  end;

  crypto_auth_hmacsha512_state = record
    ictx: crypto_hash_sha512_state;
    octx: crypto_hash_sha512_state;
  end;

  crypto_auth_hmacsha512256_state = crypto_auth_hmacsha512_state;

  Pcrypto_auth_hmacsha512256_state = ^crypto_auth_hmacsha512256_state;

  crypto_hash_sha256_state = record
    state: array[0..7] of UInt32;
    count: UInt64;
    buf: array[0..63] of UInt8;
  end;

  crypto_auth_hmacsha256_state = record
    ictx: crypto_hash_sha256_state;
    octx: crypto_hash_sha256_state;
  end;

  crypto_generichash_blake2b_state = record
    opaque: array[0..383] of Byte;
  end;

  crypto_generichash_state = crypto_generichash_blake2b_state;

  Pcrypto_generichash_state = ^crypto_generichash_state;

  crypto_onetimeauth_poly1305_state = record
    opaque: array[0..255] of Byte;
  end;

  crypto_onetimeauth_state = crypto_onetimeauth_poly1305_state;

  Pcrypto_onetimeauth_state = ^crypto_onetimeauth_state;

  crypto_secretstream_xchacha20poly1305_state = record
    k: array[0..31] of Byte;
    nonce: array[0..11] of Byte;
    _pad: array[0..7] of Byte;
  end;

  crypto_sign_ed25519ph_state = record
    hs: crypto_hash_sha512_state;
  end;

  crypto_sign_state = crypto_sign_ed25519ph_state;

  Pcrypto_sign_state = ^crypto_sign_state;

  randombytes_implementation = record
    implementation_name: function: PByte; cdecl;
    random: function: UInt32; cdecl;
    stir: procedure; cdecl;
    uniform: function(const upper_bound: UInt32): UInt32; cdecl;
    buf: procedure(const buf: Pointer; const size: NativeUInt); cdecl;
    close: function: Integer; cdecl;
  end;

function sodium_init: Integer; cdecl; external LIB_SODIUM;

type
  sodium_set_misuse_handler_handler = procedure; cdecl;

function sodium_set_misuse_handler(handler: sodium_set_misuse_handler_handler): Integer; cdecl; external LIB_SODIUM;

procedure sodium_misuse; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_is_available: Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_nsecbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_npubbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_abytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_encrypt(c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_decrypt(m: PByte; mlen_p: PUInt64; nsec: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_encrypt_detached(c: PByte; mac: PByte; maclen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_decrypt_detached(m: PByte; nsec: PByte; const c: PByte; clen: UInt64; const mac: PByte; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_beforenm(ctx_: Pcrypto_aead_aes256gcm_state; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_encrypt_afternm(c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const ctx_: Pcrypto_aead_aes256gcm_state): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_decrypt_afternm(m: PByte; mlen_p: PUInt64; nsec: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64; const npub: PByte; const ctx_: Pcrypto_aead_aes256gcm_state): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_encrypt_detached_afternm(c: PByte; mac: PByte; maclen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const ctx_: Pcrypto_aead_aes256gcm_state): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_aes256gcm_decrypt_detached_afternm(m: PByte; nsec: PByte; const c: PByte; clen: UInt64; const mac: PByte; const ad: PByte; adlen: UInt64; const npub: PByte; const ctx_: Pcrypto_aead_aes256gcm_state): Integer; cdecl; external LIB_SODIUM;

procedure crypto_aead_aes256gcm_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_nsecbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_npubbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_abytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_encrypt(c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_decrypt(m: PByte; mlen_p: PUInt64; nsec: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_encrypt_detached(c: PByte; mac: PByte; maclen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_ietf_decrypt_detached(m: PByte; nsec: PByte; const c: PByte; clen: UInt64; const mac: PByte; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_aead_chacha20poly1305_ietf_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_nsecbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_npubbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_abytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_encrypt(c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_decrypt(m: PByte; mlen_p: PUInt64; nsec: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_encrypt_detached(c: PByte; mac: PByte; maclen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_chacha20poly1305_decrypt_detached(m: PByte; nsec: PByte; const c: PByte; clen: UInt64; const mac: PByte; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_aead_chacha20poly1305_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_nsecbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_npubbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_abytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_encrypt(c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_decrypt(m: PByte; mlen_p: PUInt64; nsec: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_encrypt_detached(c: PByte; mac: PByte; maclen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; const nsec: PByte; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_aead_xchacha20poly1305_ietf_decrypt_detached(m: PByte; nsec: PByte; const c: PByte; clen: UInt64; const mac: PByte; const ad: PByte; adlen: UInt64; const npub: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_aead_xchacha20poly1305_ietf_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_hash_sha512_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_hash_sha512_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_hash_sha512(_out: PByte; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha512_init(state: Pcrypto_hash_sha512_state): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha512_update(state: Pcrypto_hash_sha512_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha512_final(state: Pcrypto_hash_sha512_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_init(state: Pcrypto_auth_hmacsha512_state; const key: PByte; keylen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_update(state: Pcrypto_auth_hmacsha512_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512_final(state: Pcrypto_auth_hmacsha512_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_auth_hmacsha512_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_init(state: Pcrypto_auth_hmacsha512256_state; const key: PByte; keylen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_update(state: Pcrypto_auth_hmacsha512256_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha512256_final(state: Pcrypto_auth_hmacsha512256_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_auth_hmacsha512256_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_auth_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_auth(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_auth_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_hash_sha256_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_hash_sha256_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_hash_sha256(_out: PByte; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha256_init(state: Pcrypto_hash_sha256_state): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha256_update(state: Pcrypto_hash_sha256_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_sha256_final(state: Pcrypto_hash_sha256_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_init(state: Pcrypto_auth_hmacsha256_state; const key: PByte; keylen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_update(state: Pcrypto_auth_hmacsha256_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_auth_hmacsha256_final(state: Pcrypto_auth_hmacsha256_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_auth_hmacsha256_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xsalsa20_xor_ic(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; ic: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_xsalsa20_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_publickeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_secretkeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_beforenmbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_seed_keypair(pk: PByte; sk: PByte; const seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_beforenm(k: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_boxzerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_zerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_open(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_afternm(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xsalsa20poly1305_open_afternm(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_publickeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_secretkeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_PRIMITIVE: PByte; cdecl; external LIB_SODIUM;

function crypto_box_seed_keypair(pk: PByte; sk: PByte; const seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_easy(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open_easy(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_detached(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open_detached(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_beforenmbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_beforenm(k: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_easy_afternm(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open_easy_afternm(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_detached_afternm(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open_detached_afternm(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_sealbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_seal(c: PByte; const m: PByte; mlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_seal_open(m: PByte; const c: PByte; clen: UInt64; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_zerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_boxzerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_afternm(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_open_afternm(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xchacha20_xor_ic(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; ic: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_xchacha20_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_publickeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_secretkeybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_beforenmbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_seed_keypair(pk: PByte; sk: PByte; const seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_easy(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_open_easy(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_detached(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_open_detached(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_beforenm(k: PByte; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_easy_afternm(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_open_easy_afternm(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_detached_afternm(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_open_detached_afternm(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_sealbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_seal(c: PByte; const m: PByte; mlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_box_curve25519xchacha20poly1305_seal_open(m: PByte; const c: PByte; clen: UInt64; const pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_UNIFORMBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_hashbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_NONREDUCEDSCALARBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_is_valid_point(const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_add(r: PByte; const p: PByte; const q: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_sub(r: PByte; const p: PByte; const q: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_from_uniform(p: PByte; const r: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ed25519_from_hash(p: PByte; const h: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_random(p: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_random(r: PByte); cdecl; external LIB_SODIUM;

function crypto_core_ed25519_scalar_invert(recip: PByte; const s: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_negate(neg: PByte; const s: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_complement(comp: PByte; const s: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_add(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_sub(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_mul(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ed25519_scalar_reduce(r: PByte; const s: PByte); cdecl; external LIB_SODIUM;

function crypto_core_hchacha20_outputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hchacha20_inputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hchacha20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hchacha20_constbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hchacha20(_out: PByte; const _in: PByte; const k: PByte; const c: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_hsalsa20_outputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hsalsa20_inputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hsalsa20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hsalsa20_constbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_hsalsa20(_out: PByte; const _in: PByte; const k: PByte; const c: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_hashbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_NONREDUCEDSCALARBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_is_valid_point(const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_add(r: PByte; const p: PByte; const q: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_sub(r: PByte; const p: PByte; const q: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_from_hash(p: PByte; const r: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_random(p: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_random(r: PByte); cdecl; external LIB_SODIUM;

function crypto_core_ristretto255_scalar_invert(recip: PByte; const s: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_negate(neg: PByte; const s: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_complement(comp: PByte; const s: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_add(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_sub(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_mul(z: PByte; const x: PByte; const y: PByte); cdecl; external LIB_SODIUM;

procedure crypto_core_ristretto255_scalar_reduce(r: PByte; const s: PByte); cdecl; external LIB_SODIUM;

function crypto_core_salsa20_outputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa20_inputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa20_constbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa20(_out: PByte; const _in: PByte; const k: PByte; const c: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_salsa2012_outputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa2012_inputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa2012_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa2012_constbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa2012(_out: PByte; const _in: PByte; const k: PByte; const c: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_core_salsa208_outputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa208_inputbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa208_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa208_constbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_core_salsa208(_out: PByte; const _in: PByte; const k: PByte; const c: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_keybytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_keybytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_saltbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_personalbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b(_out: PByte; outlen: NativeUInt; const _in: PByte; inlen: UInt64; const key: PByte; keylen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_salt_personal(_out: PByte; outlen: NativeUInt; const _in: PByte; inlen: UInt64; const key: PByte; keylen: NativeUInt; const salt: PByte; const personal: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_init(state: Pcrypto_generichash_blake2b_state; const key: PByte; const keylen: NativeUInt; const outlen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_init_salt_personal(state: Pcrypto_generichash_blake2b_state; const key: PByte; const keylen: NativeUInt; const outlen: NativeUInt; const salt: PByte; const personal: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_update(state: Pcrypto_generichash_blake2b_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_blake2b_final(state: Pcrypto_generichash_blake2b_state; _out: PByte; const outlen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

procedure crypto_generichash_blake2b_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_generichash_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_keybytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_keybytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_generichash_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_generichash(_out: PByte; outlen: NativeUInt; const _in: PByte; inlen: UInt64; const key: PByte; keylen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_init(state: Pcrypto_generichash_state; const key: PByte; const keylen: NativeUInt; const outlen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_update(state: Pcrypto_generichash_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_generichash_final(state: Pcrypto_generichash_state; _out: PByte; const outlen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

procedure crypto_generichash_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_hash_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_hash(_out: PByte; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_hash_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_kdf_blake2b_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_blake2b_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_blake2b_contextbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_blake2b_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_blake2b_derive_from_key(subkey: PByte; subkey_len: NativeUInt; subkey_id: UInt64; ctx: PByte; key: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_kdf_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_contextbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kdf_PRIMITIVE: PByte; cdecl; external LIB_SODIUM;

function crypto_kdf_derive_from_key(subkey: PByte; subkey_len: NativeUInt; subkey_id: UInt64; ctx: PByte; key: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_kdf_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_kx_PUBLICKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kx_SECRETKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kx_SEEDBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kx_SESSIONKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_kx_PRIMITIVE: PByte; cdecl; external LIB_SODIUM;

function crypto_kx_seed_keypair(pk: PByte; sk: PByte; seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_kx_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_kx_client_session_keys(rx: PByte; tx: PByte; client_pk: PByte; client_sk: PByte; server_pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_kx_server_session_keys(rx: PByte; tx: PByte; server_pk: PByte; server_sk: PByte; client_pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_init(state: Pcrypto_onetimeauth_poly1305_state; const key: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_update(state: Pcrypto_onetimeauth_poly1305_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_poly1305_final(state: Pcrypto_onetimeauth_poly1305_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_onetimeauth_poly1305_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_onetimeauth_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_onetimeauth(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_verify(const h: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_init(state: Pcrypto_onetimeauth_state; const key: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_update(state: Pcrypto_onetimeauth_state; const _in: PByte; inlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_onetimeauth_final(state: Pcrypto_onetimeauth_state; _out: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_onetimeauth_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_alg_argon2i13: Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_passwd_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_passwd_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_saltbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_strbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_strprefix: PByte; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_opslimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_opslimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_memlimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_memlimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_opslimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_memlimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_opslimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_memlimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i(const _out: PByte; outlen: UInt64; const passwd: PByte; passwdlen: UInt64; const salt: PByte; opslimit: UInt64; memlimit: NativeUInt; alg: Integer): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_str(_out: PByte; const passwd: PByte; passwdlen: UInt64; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_str_verify(str: PByte; const passwd: PByte; passwdlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2i_str_needs_rehash(str: PByte; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_alg_argon2id13: Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_passwd_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_passwd_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_saltbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_strbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_strprefix: PByte; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_opslimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_opslimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_memlimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_memlimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_opslimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_memlimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_opslimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_memlimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id(const _out: PByte; outlen: UInt64; const passwd: PByte; passwdlen: UInt64; const salt: PByte; opslimit: UInt64; memlimit: NativeUInt; alg: Integer): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_str(_out: PByte; const passwd: PByte; passwdlen: UInt64; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_str_verify(str: PByte; const passwd: PByte; passwdlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_argon2id_str_needs_rehash(str: PByte; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_alg_argon2i13: Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_alg_argon2id13: Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_alg_default: Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_passwd_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_passwd_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_saltbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_strbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_strprefix: PByte; cdecl; external LIB_SODIUM;

function crypto_pwhash_opslimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_opslimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_memlimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_memlimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_OPSLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_MEMLIMIT_INTERACTIVE: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_opslimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_memlimit_moderate: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_opslimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_memlimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash(const _out: PByte; outlen: UInt64; const passwd: PByte; passwdlen: UInt64; const salt: PByte; opslimit: UInt64; memlimit: NativeUInt; alg: Integer): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_str(_out: PByte; const passwd: PByte; passwdlen: UInt64; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_str_alg(_out: PByte; const passwd: PByte; passwdlen: UInt64; opslimit: UInt64; memlimit: NativeUInt; alg: Integer): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_str_verify(str: PByte; const passwd: PByte; passwdlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_str_needs_rehash(str: PByte; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_bytes_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_bytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_passwd_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_passwd_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_saltbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_strbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_strprefix: PByte; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_opslimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_opslimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_memlimit_min: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_memlimit_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_opslimit_interactive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_memlimit_interactive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256(const _out: PByte; outlen: UInt64; const passwd: PByte; passwdlen: UInt64; const salt: PByte; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_str(_out: PByte; const passwd: PByte; passwdlen: UInt64; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_str_verify(str: PByte; const passwd: PByte; passwdlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_ll(const passwd: PUInt8; passwdlen: NativeUInt; const salt: PUInt8; saltlen: NativeUInt; n: UInt64; r: UInt32; p: UInt32; buf: PUInt8; buflen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_pwhash_scryptsalsa208sha256_str_needs_rehash(str: PByte; opslimit: UInt64; memlimit: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_curve25519_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_curve25519_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_curve25519(q: PByte; const n: PByte; const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_curve25519_base(q: PByte; const n: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_scalarmult_base(q: PByte; const n: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult(q: PByte; const n: PByte; const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519(q: PByte; const n: PByte; const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519_noclamp(q: PByte; const n: PByte; const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519_base(q: PByte; const n: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ed25519_base_noclamp(q: PByte; const n: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ristretto255_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ristretto255_scalarbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ristretto255(q: PByte; const n: PByte; const p: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_scalarmult_ristretto255_base(q: PByte; const n: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_open(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_secretbox_xsalsa20poly1305_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_boxzerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xsalsa20poly1305_zerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_secretbox_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_easy(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_open_easy(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_detached(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_open_detached(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_secretbox_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_secretbox_zerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_boxzerobytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_open(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_macbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_easy(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_open_easy(m: PByte; const c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_detached(c: PByte; mac: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretbox_xchacha20poly1305_open_detached(m: PByte; const c: PByte; const mac: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_xor_ic(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; ic: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_chacha20_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_chacha20_ietf_xor_ic(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; ic: UInt32; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_chacha20_ietf_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_abytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_headerbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_tag_message: Byte; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_tag_push: Byte; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_tag_rekey: Byte; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_tag_final: Byte; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

procedure crypto_secretstream_xchacha20poly1305_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_init_push(state: Pcrypto_secretstream_xchacha20poly1305_state; header: PByte; k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_push(state: Pcrypto_secretstream_xchacha20poly1305_state; c: PByte; clen_p: PUInt64; const m: PByte; mlen: UInt64; const ad: PByte; adlen: UInt64; tag: Byte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_init_pull(state: Pcrypto_secretstream_xchacha20poly1305_state; header: PByte; k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_secretstream_xchacha20poly1305_pull(state: Pcrypto_secretstream_xchacha20poly1305_state; m: PByte; mlen_p: PUInt64; tag_p: PByte; const c: PByte; clen: UInt64; const ad: PByte; adlen: UInt64): Integer; cdecl; external LIB_SODIUM;

procedure crypto_secretstream_xchacha20poly1305_rekey(state: Pcrypto_secretstream_xchacha20poly1305_state); cdecl; external LIB_SODIUM;

function crypto_shorthash_siphash24_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_siphash24_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_siphash24(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_shorthash_siphashx24_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_siphashx24_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_siphashx24(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_shorthash_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_shorthash_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_shorthash(_out: PByte; const _in: PByte; inlen: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_shorthash_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_sign_ed25519ph_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_PUBLICKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_SECRETKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519(sm: PByte; smlen_p: PUInt64; const m: PByte; mlen: UInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_open(m: PByte; mlen_p: PUInt64; const sm: PByte; smlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_detached(sig: PByte; siglen_p: PUInt64; const m: PByte; mlen: UInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_verify_detached(const sig: PByte; const m: PByte; mlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_seed_keypair(pk: PByte; sk: PByte; const seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_pk_to_curve25519(curve25519_pk: PByte; const ed25519_pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_sk_to_curve25519(curve25519_sk: PByte; const ed25519_sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_sk_to_seed(seed: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519_sk_to_pk(pk: PByte; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519ph_init(state: Pcrypto_sign_ed25519ph_state): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519ph_update(state: Pcrypto_sign_ed25519ph_state; const m: PByte; mlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519ph_final_create(state: Pcrypto_sign_ed25519ph_state; sig: PByte; siglen_p: PUInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_ed25519ph_final_verify(state: Pcrypto_sign_ed25519ph_state; const sig: PByte; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_statebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_PUBLICKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_SECRETKEYBYTES: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_sign_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_sign_seed_keypair(pk: PByte; sk: PByte; const seed: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign(sm: PByte; smlen_p: PUInt64; const m: PByte; mlen: UInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_open(m: PByte; mlen_p: PUInt64; const sm: PByte; smlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_detached(sig: PByte; siglen_p: PUInt64; const m: PByte; mlen: UInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_verify_detached(const sig: PByte; const m: PByte; mlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_init(state: Pcrypto_sign_state): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_update(state: Pcrypto_sign_state; const m: PByte; mlen: UInt64): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_final_create(state: Pcrypto_sign_state; sig: PByte; siglen_p: PUInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_final_verify(state: Pcrypto_sign_state; const sig: PByte; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_edwards25519sha512batch(sm: PByte; smlen_p: PUInt64; const m: PByte; mlen: UInt64; const sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_edwards25519sha512batch_open(m: PByte; mlen_p: PUInt64; const sm: PByte; smlen: UInt64; const pk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_sign_edwards25519sha512batch_keypair(pk: PByte; sk: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_primitive: PByte; cdecl; external LIB_SODIUM;

function crypto_stream(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_stream_salsa20_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa20_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa20_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa20(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_salsa20_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_salsa20_xor_ic(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; ic: UInt64; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_salsa20_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_stream_salsa2012_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa2012_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa2012_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa2012(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_salsa2012_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_salsa2012_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_stream_salsa208_keybytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa208_noncebytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa208_messagebytes_max: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_stream_salsa208(c: PByte; clen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_stream_salsa208_xor(c: PByte; const m: PByte; mlen: UInt64; const n: PByte; const k: PByte): Integer; cdecl; external LIB_SODIUM;

procedure crypto_stream_salsa208_keygen(k: PByte); cdecl; external LIB_SODIUM;

function crypto_verify_16_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_verify_16(const x: PByte; const y: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_verify_32_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_verify_32(const x: PByte; const y: PByte): Integer; cdecl; external LIB_SODIUM;

function crypto_verify_64_bytes: NativeUInt; cdecl; external LIB_SODIUM;

function crypto_verify_64(const x: PByte; const y: PByte): Integer; cdecl; external LIB_SODIUM;

function randombytes_seedbytes: NativeUInt; cdecl; external LIB_SODIUM;

procedure randombytes_buf(const buf: Pointer; const size: NativeUInt); cdecl; external LIB_SODIUM;

procedure randombytes_buf_deterministic(const buf: Pointer; const size: NativeUInt; seed: PByte); cdecl; external LIB_SODIUM;

function randombytes_random: UInt32; cdecl; external LIB_SODIUM;

function randombytes_uniform(const upper_bound: UInt32): UInt32; cdecl; external LIB_SODIUM;

procedure randombytes_stir; cdecl; external LIB_SODIUM;

function randombytes_close: Integer; cdecl; external LIB_SODIUM;

function randombytes_set_implementation(impl: Prandombytes_implementation): Integer; cdecl; external LIB_SODIUM;

function randombytes_implementation_name: PByte; cdecl; external LIB_SODIUM;

procedure randombytes(const buf: PByte; const buf_len: UInt64); cdecl; external LIB_SODIUM;

function sodium_runtime_has_neon: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_sse2: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_sse3: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_ssse3: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_sse41: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_avx: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_avx2: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_avx512f: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_pclmul: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_aesni: Integer; cdecl; external LIB_SODIUM;

function sodium_runtime_has_rdrand: Integer; cdecl; external LIB_SODIUM;

function _sodium_runtime_get_cpu_features: Integer; cdecl; external LIB_SODIUM;

procedure sodium_memzero(const pnt: Pointer; const len: NativeUInt); cdecl; external LIB_SODIUM;

procedure sodium_stackzero(const len: NativeUInt); cdecl; external LIB_SODIUM;

function sodium_memcmp(const b1_: Pointer; const b2_: Pointer; len: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function sodium_compare(const b1_: PByte; const b2_: PByte; len: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function sodium_is_zero(const n: PByte; const nlen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

procedure sodium_increment(n: PByte; const nlen: NativeUInt); cdecl; external LIB_SODIUM;

procedure sodium_add(a: PByte; const b: PByte; const len: NativeUInt); cdecl; external LIB_SODIUM;

procedure sodium_sub(a: PByte; const b: PByte; const len: NativeUInt); cdecl; external LIB_SODIUM;

function sodium_bin2hex(const hex: PByte; const hex_maxlen: NativeUInt; const bin: PByte; const bin_len: NativeUInt): PByte; cdecl; external LIB_SODIUM;

function sodium_hex2bin(const bin: PByte; const bin_maxlen: NativeUInt; const hex: PByte; const hex_len: NativeUInt; const ignore: PByte; const bin_len: PNativeUInt; const hex_end: PPByte): Integer; cdecl; external LIB_SODIUM;

function sodium_base64_encoded_len(const bin_len: NativeUInt; const variant: Integer): NativeUInt; cdecl; external LIB_SODIUM;

function sodium_bin2base64(const b64: PByte; const b64_maxlen: NativeUInt; const bin: PByte; const bin_len: NativeUInt; const variant: Integer): PByte; cdecl; external LIB_SODIUM;

function sodium_base642bin(const bin: PByte; const bin_maxlen: NativeUInt; const b64: PByte; const b64_len: NativeUInt; const ignore: PByte; const bin_len: PNativeUInt; const b64_end: PPByte; const variant: Integer): Integer; cdecl; external LIB_SODIUM;

function sodium_mlock(const addr: Pointer; const len: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function sodium_munlock(const addr: Pointer; const len: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function sodium_malloc(const size: NativeUInt): Pointer; cdecl; external LIB_SODIUM;

function sodium_allocarray(count: NativeUInt; size: NativeUInt): Pointer; cdecl; external LIB_SODIUM;

procedure sodium_free(ptr: Pointer); cdecl; external LIB_SODIUM;

function sodium_mprotect_noaccess(ptr: Pointer): Integer; cdecl; external LIB_SODIUM;

function sodium_mprotect_readonly(ptr: Pointer): Integer; cdecl; external LIB_SODIUM;

function sodium_mprotect_readwrite(ptr: Pointer): Integer; cdecl; external LIB_SODIUM;

function sodium_pad(padded_buflen_p: PNativeUInt; buf: PByte; unpadded_buflen: NativeUInt; blocksize: NativeUInt; max_buflen: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function sodium_unpad(unpadded_buflen_p: PNativeUInt; const buf: PByte; padded_buflen: NativeUInt; blocksize: NativeUInt): Integer; cdecl; external LIB_SODIUM;

function _sodium_alloc_init: Integer; cdecl; external LIB_SODIUM;

function SODIUM_VERSION_STRING: PByte; cdecl; external LIB_SODIUM;

function SODIUM_LIBRARY_VERSION_MAJOR: Integer; cdecl; external LIB_SODIUM;

function SODIUM_LIBRARY_VERSION_MINOR: Integer; cdecl; external LIB_SODIUM;

function sodium_library_minimal: Integer; cdecl; external LIB_SODIUM;

implementation

end.

